apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust size as needed
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              value: "your_password"  # Use Secrets in production
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 30132  # Change this to your desired NodePort
      
  type: NodePort  # Use NodePort/LoadBalancer for external access


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local

---
# apiVersion: batch/v1
# kind: CronJob
# metadata:
#   name: postgres-backup
# spec:
#   schedule: "0 * * * *"  # every hour
#   jobTemplate:
#     spec:
#       template:
#         spec:
#           containers:
#             - name: backup
#               image: postgres:latest
#               env:
#                 - name: PGPASSWORD
#                   value: "your_password"
#               command: ["/bin/sh", "-c"]
#               args:
#                 - |
#                   pg_dump -h postgres-0.postgres.default.svc.cluster.local \
#                           -U postgres \
#                           -F c \
#                           -f /backup/backup_$(date +%Y%m%d%H%M%S).dump
#               volumeMounts:
#                 - name: backup-volume
#                   mountPath: /backup
#           restartPolicy: OnFailure
#           volumes:
#             - name: backup-volume
#               persistentVolumeClaim:
#                 claimName: postgres-backup-pvc
